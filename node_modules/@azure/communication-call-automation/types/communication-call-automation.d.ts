/// <reference types="node" />

import { CommonClientOptions } from '@azure/core-client';
import { CommunicationIdentifier } from '@azure/communication-common';
import { CommunicationUserIdentifier } from '@azure/communication-common';
import * as coreClient from '@azure/core-client';
import { KeyCredential } from '@azure/core-auth';
import { MicrosoftTeamsAppIdentifier } from '@azure/communication-common';
import { MicrosoftTeamsUserIdentifier } from '@azure/communication-common';
import { OperationOptions } from '@azure/core-client';
import { PhoneNumberIdentifier } from '@azure/communication-common';
import { TokenCredential } from '@azure/core-auth';

/** The failed to add participant event. */
export declare interface AddParticipantFailed extends Omit<RestAddParticipantFailed, "callConnectionId" | "serverCallId" | "correlationId" | "participant" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** The participant in the call. */
    participant?: CommunicationIdentifier;
    /** kind of this event. */
    kind: "AddParticipantFailed";
}

/** Options to add participants. */
export declare interface AddParticipantOptions extends OperationOptions {
    /**
     * Gets or sets the timeout to wait for the invited participant to pickup.
     * The maximum value of this is 180 seconds
     */
    invitationTimeoutInSeconds?: number;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The response payload for adding participants to the call. */
export declare interface AddParticipantResult {
    /** invitation ID used to add the participant. */
    invitationId?: string;
    /** List of current participants in the call. */
    participant?: CallParticipant;
    /** The operation context provided by client. */
    operationContext?: string;
}

/** The participant successfully added event. */
export declare interface AddParticipantSucceeded extends Omit<RestAddParticipantSucceeded, "callConnectionId" | "serverCallId" | "correlationId" | "participant" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** The participant in the call. */
    participant?: CommunicationIdentifier;
    /** kind of this event. */
    kind: "AddParticipantSucceeded";
}

/**
 * Options to answer a call.
 */
export declare interface AnswerCallOptions extends OperationOptions {
    /** AI options for the call. */
    callIntelligenceOptions?: CallIntelligenceOptions;
    /** The operation context. */
    operationContext?: string;
}

/**
 * AnswerCall result
 */
export declare type AnswerCallResult = CallResult;

/** Optional parameters. */
declare interface CallAutomationApiClientOptionalParams extends coreClient.ServiceClientOptions {
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * A CallAutomationClient represents a Client to the Azure Communication CallAutomation service.
 */
export declare class CallAutomationClient {
    private readonly callAutomationApiClient;
    private readonly sourceIdentity?;
    private readonly credential;
    private readonly internalPipelineOptions;
    /**
     * Initializes a new instance of the CallAutomationClient class.
     * @param connectionString - Connection string to connect to an Azure Communication Service resource.
     *                         Example: "endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret";
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(connectionString: string, options?: CallAutomationClientOptions);
    /**
     * Initializes a new instance of the CallAutomationClient class using a TokenCredential or KeyCredential.
     * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).
     * @param credential - TokenCredential or KeyCredential that is used to authenticate requests to the service.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(endpoint: string, credential: TokenCredential | KeyCredential, options?: CallAutomationClientOptions);
    /**
     * Initializes a new instance of CallConnection.
     * @param callConnectionId - The CallConnection id for the CallConnection instance. (ex: 421CONTOSO-cRD6-4RDc-a078-99dRANDOMf).
     */
    getCallConnection(callConnectionId: string): CallConnection;
    /**
     * Initializes a new instance of CallRecording.
     */
    getCallRecording(): CallRecording;
    /**
     * Get Source Identity that is used for create and answer call
     */
    getSourceIdentity(): CommunicationUserIdentifier | undefined;
    private createCallInternal;
    /**
     * Create an outgoing call from source to a target identity.
     * @param targetParticipant - A single target.
     * @param callbackUrl - The callback url.
     * @param options - Additional request options contains createCallConnection api options.
     */
    createCall(targetParticipant: CallInvite, callbackUrl: string, options?: CreateCallOptions): Promise<CreateCallResult>;
    /**
     * Create an outgoing call from source to a group of targets identities.
     * @param targetParticipants - A group of targets identities.
     * @param callbackUrl - The callback url.
     * @param options - Additional request options contains createCallConnection api options.
     */
    createGroupCall(targetParticipants: CommunicationIdentifier[], callbackUrl: string, options?: CreateCallOptions): Promise<CreateCallResult>;
    /**
     * Answer the call.
     * @param incomingCallContext - The context associated with the call.
     * @param callbackUrl - The callback url.
     * @param options - Additional request options contains answerCall api options.
     */
    answerCall(incomingCallContext: string, callbackUrl: string, options?: AnswerCallOptions): Promise<AnswerCallResult>;
    /**
     * Redirect the call.
     *
     * @param incomingCallContext - The context associated with the call.
     * @param targetParticipant - The target identity to redirect the call to.
     * @param options - Additional request options contains redirectCall api options.
     */
    redirectCall(incomingCallContext: string, targetParticipant: CallInvite, options?: RedirectCallOptions): Promise<void>;
    /**
     * Reject the call.
     *
     * @param incomingCallContext - The context associated with the call.
     * @param options - Additional request options contains rejectCall api options.
     */
    rejectCall(incomingCallContext: string, options?: RejectCallOptions): Promise<void>;
}

/**
 * Client options used to configure CallAutomation Client API requests.
 */
export declare interface CallAutomationClientOptions extends CommonClientOptions {
    /**
     * The identifier of the source of the call for call creating/answering/inviting operation.
     */
    sourceIdentity?: CommunicationUserIdentifier;
}

/** Callback events for Call Automation */
export declare type CallAutomationEvent = AddParticipantSucceeded | AddParticipantFailed | RemoveParticipantSucceeded | RemoveParticipantFailed | CallConnected | CallDisconnected | CallTransferAccepted | CallTransferFailed | ParticipantsUpdated | RecordingStateChanged | PlayCompleted | PlayFailed | PlayCanceled | RecognizeCompleted | RecognizeCanceled | RecognizeFailed | ContinuousDtmfRecognitionToneReceived | ContinuousDtmfRecognitionToneFailed | ContinuousDtmfRecognitionStopped | SendDtmfTonesCompleted | SendDtmfTonesFailed | CancelAddParticipantSucceeded | CancelAddParticipantFailed;

/** Event when call was established. */
export declare interface CallConnected extends Omit<RestCallConnected, "callConnectionId" | "serverCallId" | "correlationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "CallConnected";
}

/**
 * CallConnection class represents call connection based APIs.
 */
export declare class CallConnection {
    private readonly callConnectionId;
    private readonly callConnection;
    private readonly callAutomationApiClient;
    private readonly endpoint;
    private readonly credential;
    private readonly callAutomationApiClientOptions?;
    constructor(callConnectionId: string, endpoint: string, credential: KeyCredential | TokenCredential, options?: CallAutomationApiClientOptionalParams);
    /**
     * Initializes a new instance of CallMedia.
     */
    getCallMedia(): CallMedia;
    /**
     * Get call connection properties of the call
     */
    getCallConnectionProperties(options?: GetCallConnectionPropertiesOptions): Promise<CallConnectionProperties>;
    /**
     * Hang up the call for itself or terminate the whole call.
     *
     * @param isForEveryOne - Determine if every one in the call would be hung up or not.
     */
    hangUp(isForEveryone: boolean, options?: HangUpOptions): Promise<void>;
    /**
     * Get a participant from the call
     *
     * @param targetParticipant - The communication identifier of requested participant.
     */
    getParticipant(targetParticipant: CommunicationIdentifier, options?: GetParticipantOptions): Promise<CallParticipant>;
    /**
     * Get all participants from the call
     */
    listParticipants(options?: GetParticipantOptions): Promise<ListParticipantsResult>;
    private createCustomCallingContextInternal;
    /**
     * Add a participant to the call
     *
     * @param participant - The participant is going to be added.
     */
    addParticipant(targetParticipant: CallInvite, options?: AddParticipantOptions): Promise<AddParticipantResult>;
    /**
     * Transfer the call to a target participant
     *
     * @param targetParticipant - The target to be transferred to.
     */
    transferCallToParticipant(targetParticipant: CommunicationIdentifier, options?: TransferCallToParticipantOptions): Promise<TransferCallResult>;
    /**
     * Remove a participant from the call
     *
     * @param participant - The participant is going to be removed from the call.
     */
    removeParticipant(participant: CommunicationIdentifier, options?: RemoveParticipantsOption): Promise<RemoveParticipantResult>;
    /**
     * Mute participant from the call.
     *
     * @param participant - Participant to be muted from the call.
     * @param options - Additional attributes for mute participant.
     */
    muteParticipant(participant: CommunicationIdentifier, options?: MuteParticipantOption): Promise<MuteParticipantResult>;
    /** Cancel add participant operation.
     *
     * @param invitationId - Invitation ID used to cancel the add participant request.
     * @param options - Additional attributes for cancel add participant operation.
     */
    cancelAddParticipantOperation(invitationId: string, options?: CancelAddParticipantOperationOptions): Promise<CancelAddParticipantOperationResult>;
}

/** Properties of a call connection */
export declare interface CallConnectionProperties {
    /** The call connection id. */
    callConnectionId?: string;
    /** The server call id. */
    serverCallId?: string;
    /**
     * The source caller Id, a phone number, that's shown to the PSTN participant being invited.
     * Required only when calling a PSTN callee.
     */
    sourceCallerIdNumber?: PhoneNumberIdentifier;
    /** Display name of the call if dialing out to a pstn number. */
    sourceDisplayName?: string;
    /** Source identity. */
    source?: CommunicationIdentifier;
    /** The targets of the call. */
    targetParticipants?: CommunicationIdentifier[];
    /** The state of the call connection. */
    callConnectionState?: CallConnectionStateModel;
    /** The callback URL. */
    callbackUrl?: string;
    /** The correlation ID. */
    correlationId?: string;
    /** Identity of the answering entity. Only populated when identity is provided in the request. */
    answeredby?: CommunicationUserIdentifier;
}

/**
 * Defines values for CallConnectionStateModel. \
 * {@link KnownCallConnectionStateModel} can be used interchangeably with CallConnectionStateModel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **connecting** \
 * **connected** \
 * **transferring** \
 * **transferAccepted** \
 * **disconnecting** \
 * **disconnected**
 */
export declare type CallConnectionStateModel = string;

/** Event when all participants left and call was terminated. */
export declare interface CallDisconnected extends Omit<RestCallDisconnected, "callConnectionId" | "serverCallId" | "correlationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "CallDisconnected";
}

/** AI options for the call. */
export declare interface CallIntelligenceOptions {
    /** The identifier of the Cognitive Service resource assigned to this call. */
    cognitiveServicesEndpoint?: string;
}

/** Call invitee details. */
export declare interface CallInvite {
    /** The Target's PhoneNumberIdentifier, CommunicationUserIdentifier or MicrosoftTeamsUserIdentifier. */
    readonly targetParticipant: PhoneNumberIdentifier | CommunicationUserIdentifier | MicrosoftTeamsUserIdentifier | MicrosoftTeamsAppIdentifier;
    /** Caller's phone number identifier. */
    readonly sourceCallIdNumber?: PhoneNumberIdentifier;
    sourceDisplayName?: string;
    /** Used by customer to send custom context to targets. */
    customCallingContext?: CustomCallingContext;
}

/** The locator used for joining or taking action on a call. */
export declare interface CallLocator {
    id: string;
    kind: CallLocatorType;
}

/** The locator type of a call. */
export declare type CallLocatorType = "serverCallLocator" | "groupCallLocator";

/**
 * CallMedia class represents call media related APIs.
 */
export declare class CallMedia {
    private readonly callConnectionId;
    private readonly callMedia;
    private readonly callAutomationApiClient;
    constructor(callConnectionId: string, endpoint: string, credential: KeyCredential | TokenCredential, options?: CallAutomationApiClientOptionalParams);
    private createPlaySourceInternal;
    /**
     * Play audio to a specific participant.
     *
     * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.
     * @param playTo - The targets to play to.
     * @param options - Additional attributes for play.
     */
    play(playSources: (FileSource | TextSource | SsmlSource)[], playTo: CommunicationIdentifier[], options?: PlayOptions): Promise<void>;
    /**
     * Play to all participants.
     *
     * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.
     * @param options - Additional attributes for play.
     */
    playToAll(playSources: (FileSource | TextSource | SsmlSource)[], options?: PlayOptions): Promise<void>;
    private createRecognizeRequest;
    /**
     *  Recognize participant input.
     *  @deprecated This method signature is deprecated. Please use the new signature with targetParticipant and options params instead, and set maxTonesToCollect in options.
     *  @param targetParticipant - Target participant.
     *  @param maxTonesToCollect - Maximum number of DTMF tones to be collected.
     *  @param options - Different attributes for recognize.
     * */
    startRecognizing(targetParticipant: CommunicationIdentifier, maxTonesToCollect: number, options: CallMediaRecognizeDtmfOptions): Promise<void>;
    /**
     *  Recognize participant input.
     *  @param targetParticipant - Target participant.
     *  @param options - Different attributes for recognize.
     * */
    startRecognizing(targetParticipant: CommunicationIdentifier, options: CallMediaRecognizeDtmfOptions | CallMediaRecognizeChoiceOptions | CallMediaRecognizeSpeechOptions | CallMediaRecognizeSpeechOrDtmfOptions): Promise<void>;
    /**
     * Cancels all the queued media operations.
     */
    cancelAllOperations(): Promise<void>;
    /**
     * Start continuous Dtmf recognition by subscribing to tones.
     * @param targetParticipant - Target participant.
     * @param options - Additional attributes for continuous Dtmf recognition.
     * */
    startContinuousDtmfRecognition(targetParticipant: CommunicationIdentifier, options?: ContinuousDtmfRecognitionOptions): Promise<void>;
    /**
     * Stop continuous Dtmf recognition by unsubscribing to tones.
     * @param targetParticipant - Target participant.
     * @param options - Additional attributes for continuous Dtmf recognition.
     * */
    stopContinuousDtmfRecognition(targetParticipant: CommunicationIdentifier, options?: ContinuousDtmfRecognitionOptions): Promise<void>;
    /**
     * Send Dtmf tones.
     * @param tones - List of tones to be sent to target participant.
     * @param targetParticipant - Target participant.
     * @param options - Additional attributes for send Dtmf tones.
     * */
    sendDtmfTones(tones: Tone[] | DtmfTone[], targetParticipant: CommunicationIdentifier, options?: SendDtmfTonesOptions): Promise<SendDtmfTonesResult>;
}

/** The recognize configuration specific to Choices. */
export declare interface CallMediaRecognizeChoiceOptions extends CallMediaRecognizeOptions {
    /** The IvR choices for recognize. */
    choices: RecognitionChoice[];
    /** Speech language to be recognized, If not set default is en-US */
    speechLanguage?: string;
    /** Endpoint where the custom model was deployed. */
    speechRecognitionModelEndpointId?: string;
    readonly kind: "callMediaRecognizeChoiceOptions";
}

/** The recognize configuration specific to Dtmf. */
export declare interface CallMediaRecognizeDtmfOptions extends CallMediaRecognizeOptions {
    /** Time to wait between DTMF inputs to stop recognizing. */
    interToneTimeoutInSeconds?: number;
    /** List of tones that will stop recognizing. */
    stopDtmfTones?: DtmfTone[];
    /** Maximum number of DTMF tones to be collected. */
    maxTonesToCollect?: number;
    readonly kind: "callMediaRecognizeDtmfOptions";
}

/** Options to configure the recognize operation. */
export declare interface CallMediaRecognizeOptions extends OperationOptions {
    /** The source of the audio to be played for recognition. */
    playPrompt?: FileSource | TextSource | SsmlSource;
    /** If set recognize can barge into other existing queued-up/currently-processing requests. */
    interruptCallMediaOperation?: boolean;
    /** @deprecated Not in use, instead use interruptCallMediaOperation for similar functionality*/
    stopCurrentOperations?: boolean;
    /** The value to identify context of the operation. */
    operationContext?: string;
    /** Determines if we interrupt the prompt and start recognizing. */
    interruptPrompt?: boolean;
    /** Time to wait for first input after prompt. */
    initialSilenceTimeoutInSeconds?: number;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The recognize configuration specific to Speech. */
export declare interface CallMediaRecognizeSpeechOptions extends CallMediaRecognizeOptions {
    /** The length of end silence when user stops speaking and cogservice send response. */
    endSilenceTimeoutInSeconds?: number;
    /** Speech language to be recognized, If not set default is en-US */
    speechLanguage?: string;
    /** Endpoint where the custom model was deployed. */
    speechRecognitionModelEndpointId?: string;
    readonly kind: "callMediaRecognizeSpeechOptions";
}

/** The recognize configuration for Speech or Dtmf  */
export declare interface CallMediaRecognizeSpeechOrDtmfOptions extends CallMediaRecognizeOptions {
    /** The length of end silence when user stops speaking and cogservice send response. */
    endSilenceTimeoutInSeconds?: number;
    /** Time to wait between DTMF inputs to stop recognizing. */
    interToneTimeoutInSeconds?: number;
    /** List of tones that will stop recognizing. */
    stopDtmfTones?: DtmfTone[];
    /** Maximum number of DTMF tones to be collected. */
    maxTonesToCollect?: number;
    /** Speech language to be recognized, If not set default is en-US */
    speechLanguage?: string;
    /** Endpoint where the custom model was deployed. */
    speechRecognitionModelEndpointId?: string;
    readonly kind: "callMediaRecognizeSpeechOrDtmfOptions";
}

/** Contract model of an ACS call participant */
export declare interface CallParticipant {
    /** Communication identifier of the participant */
    identifier?: CommunicationIdentifier;
    /** Is participant muted */
    isMuted?: boolean;
}

/** A call participant. */
declare interface CallParticipantInternal {
    /** Communication identifier of the participant */
    identifier?: CommunicationIdentifierModel;
    /** Is participant muted */
    isMuted?: boolean;
}

/**
 * CallRecording class represents call recording related APIs.
 */
export declare class CallRecording {
    private readonly callRecordingImpl;
    private readonly contentDownloader;
    private readonly callAutomationApiClient;
    constructor(endpoint: string, credential: KeyCredential | TokenCredential, options?: CallAutomationApiClientOptionalParams);
    /**
     * Starts a call recording with the specified options.
     * @param startCallRecordingRequest - options to start the call recording
     * @param options - Operation options.
     */
    start(options: StartRecordingOptions): Promise<RecordingStateResult>;
    /**
     * Returns call recording properties.
     * @param recordingId - The recordingId associated with the recording.
     * @param options - Additional request options contains getRecordingProperties api options.
     */
    getState(recordingId: string, options?: GetRecordingPropertiesOptions): Promise<RecordingStateResult>;
    /**
     * Stops a call recording.
     * @param recordingId - The recordingId associated with the recording.
     * @param options - Additional request options contains stopRecording api options.
     */
    stop(recordingId: string, options?: StopRecordingOptions): Promise<void>;
    /**
     * Pauses a call recording.
     * @param recordingId - The recordingId associated with the recording.
     * @param options - Additional request options contains pauseRecording api options.
     */
    pause(recordingId: string, options?: PauseRecordingOptions): Promise<void>;
    /**
     * Resumes a call recording.
     * @param recordingId - The recordingId associated with the recording.
     * @param options - Additional request options contains resumeRecording api options.
     */
    resume(recordingId: string, options?: ResumeRecordingOptions): Promise<void>;
    /**
     * Deletes a recording.
     * @param recordingLocationUrl - The recording location url. Required.
     * @param options - Additional request options contains deleteRecording api options.
     */
    delete(recordingLocationUrl: string, options?: DeleteRecordingOptions): Promise<void>;
    /**
     * Returns a stream with a call recording.
     * @param sourceLocationUrl - The source location url. Required.
     * @param options - Additional request options contains downloadRecording api options.
     */
    downloadStreaming(sourceLocationUrl: string, options?: DownloadRecordingOptions): Promise<NodeJS.ReadableStream>;
    /**
     * Downloads a call recording file to the specified stream.
     * @param sourceLocationUrl - The source location url. Required.
     * @param destinationStream - The destination stream. Required.
     * @param options - Additional request options contains downloadRecording api options.
     */
    downloadToStream(sourceLocationUrl: string, destinationStream: NodeJS.WritableStream, options?: DownloadRecordingOptions): Promise<void>;
    /**
     * Downloads a call recording file to the specified path.
     * @param sourceLocationUrl - The source location url. Required.
     * @param destinationPath - The destination path. Required.
     * @param options - Additional request options contains downloadRecording api options.
     */
    downloadToPath(sourceLocationUrl: string, destinationPath: string, options?: DownloadRecordingOptions): Promise<void>;
}

/**
 * Defines values for CallRejectReason. \
 * {@link KnownCallRejectReason} can be used interchangeably with CallRejectReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **busy** \
 * **forbidden**
 */
export declare type CallRejectReason = string;

/**
 * The interface used as parent of [action]CallResult
 */
declare interface CallResult {
    callConnectionProperties: CallConnectionProperties;
    callConnection: CallConnection;
}

/** Event when transfer request was successful. */
export declare interface CallTransferAccepted extends Omit<RestCallTransferAccepted, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation" | "transferee" | "transferTarget"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** Participant that was transferred away */
    transferee: CommunicationIdentifier;
    /** Target that transferee is transferred to */
    transferTarget: CommunicationIdentifier;
    /** kind of this event. */
    kind: "CallTransferAccepted";
}

/** Event when transfer request was failed. */
export declare interface CallTransferFailed extends Omit<RestCallTransferFailed, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "CallTransferFailed";
}

/** The failed to cancel add participant event. */
export declare interface CancelAddParticipantFailed extends Omit<RestCancelAddParticipantFailed, "callConnectionId" | "serverCallId" | "correlationId" | "invitationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Invitation ID used to cancel the add participant request. */
    invitationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "CancelAddParticipantFailed";
}

/** Options for cancelling add participant request. */
export declare interface CancelAddParticipantOperationOptions extends OperationOptions {
    /** The value to identify context of the operation. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The response payload for cancelling add participant request. */
export declare interface CancelAddParticipantOperationResult {
    /** the invitation ID used to cancel the add participant request. */
    invitationId?: string;
    /** The operation context provided by client. */
    operationContext?: string;
}

/** Successful cancel add participant event. */
export declare interface CancelAddParticipantSucceeded extends Omit<RestCancelAddParticipantSucceeded, "callConnectionId" | "serverCallId" | "correlationId" | "invitationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Invitation ID used to cancel the add participant request. */
    invitationId: string;
    /** kind of this event. */
    kind: "CancelAddParticipantSucceeded";
}

/** Channel affinity for a participant */
export declare interface ChannelAffinity {
    /** Channel number to which bitstream from a particular participant will be written. */
    channel?: number;
    /**
     * The identifier for the participant whose bitstream will be written to the channel
     * represented by the channel number.
     */
    targetParticipant: CommunicationIdentifier;
}

export declare interface ChoiceResult {
    /** Label is the primary identifier for the choice detected */
    label?: string;
    /**
     * Phrases are set to the value if choice is selected via phrase detection.
     * If Dtmf input is recognized, then Label will be the identifier for the choice detected and phrases will be set to null
     */
    recognizedPhrase?: string;
}

/**
 * Defines values for CommunicationCloudEnvironmentModel. \
 * {@link KnownCommunicationCloudEnvironmentModel} can be used interchangeably with CommunicationCloudEnvironmentModel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **public** \
 * **dod** \
 * **gcch**
 */
declare type CommunicationCloudEnvironmentModel = string;

/** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. */
declare interface CommunicationIdentifierModel {
    /** The identifier kind. Only required in responses. */
    kind?: CommunicationIdentifierModelKind;
    /** Raw Id of the identifier. Optional in requests, required in responses. */
    rawId?: string;
    /** The communication user. */
    communicationUser?: CommunicationUserIdentifierModel;
    /** The phone number. */
    phoneNumber?: PhoneNumberIdentifierModel;
    /** The Microsoft Teams user. */
    microsoftTeamsUser?: MicrosoftTeamsUserIdentifierModel;
    /** The Microsoft Teams application. */
    microsoftTeamsApp?: MicrosoftTeamsAppIdentifierModel;
}

/**
 * Defines values for CommunicationIdentifierModelKind. \
 * {@link KnownCommunicationIdentifierModelKind} can be used interchangeably with CommunicationIdentifierModelKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **communicationUser** \
 * **phoneNumber** \
 * **microsoftTeamsUser** \
 * **microsoftTeamsApp**
 */
declare type CommunicationIdentifierModelKind = string;

/** A user that got created with an Azure Communication Services resource. */
declare interface CommunicationUserIdentifierModel {
    /** The Id of the communication user. */
    id: string;
}

/**
 * Options to continuous Dtmf recognition.
 */
export declare interface ContinuousDtmfRecognitionOptions extends OperationOptions {
    /** The value to identify context of the operation. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** Event sent when continuous Dtmf recognition stopped. */
export declare interface ContinuousDtmfRecognitionStopped extends Omit<RestContinuousDtmfRecognitionStopped, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "ContinuousDtmfRecognitionStopped";
}

/** Event sent when failed to recognize continuous Dtmf tone. */
export declare interface ContinuousDtmfRecognitionToneFailed extends Omit<RestContinuousDtmfRecognitionToneFailed, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "ContinuousDtmfRecognitionToneFailed";
}

/** Event sent when Dtmf tone received from targeted participant in call. */
export declare interface ContinuousDtmfRecognitionToneReceived extends Omit<RestContinuousDtmfRecognitionToneReceived, "sequenceId" | "tone" | "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** The sequence id which can be used to determine if the same tone was played multiple times or if any tones were missed. */
    sequenceId: number;
    /** Defines values for Tone. */
    tone: Tone;
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId or skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "ContinuousDtmfRecognitionToneReceived";
}

/**
 * Options to create a call.
 */
export declare interface CreateCallOptions extends OperationOptions {
    /**
     * The source caller Id, a phone number, that's shown to the PSTN participant being invited.
     * Required only when calling a PSTN callee.
     */
    sourceCallIdNumber?: PhoneNumberIdentifier;
    /** Display name of the call if dialing out to a pstn number */
    sourceDisplayName?: string;
    /** AI options for the call. */
    callIntelligenceOptions?: CallIntelligenceOptions;
    /** The operation Context. */
    operationContext?: string;
}

/**
 * CreateCall result
 */
export declare type CreateCallResult = CallResult;

/** Custom Calling Context */
export declare type CustomCallingContext = (VoipHeader | SipUserToUserHeader | SipCustomHeader)[];

declare interface CustomCallingContextHeader {
    key: string;
    value: string;
}

/**
 * Options to delete recording.
 */
export declare type DeleteRecordingOptions = OperationOptions;

/**
 * Options to download recording.
 */
export declare interface DownloadRecordingOptions extends OperationOptions {
    /** Offset byte to start download from. */
    offset?: number;
    /** Max content length in bytes. */
    length?: number;
}

export declare interface DtmfResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly tones?: Tone[];
}

/** A Dtmf Tone. */
export declare enum DtmfTone {
    /** Zero */
    Zero = "zero",
    /** One */
    One = "one",
    /** Two */
    Two = "two",
    /** Three */
    Three = "three",
    /** Four */
    Four = "four",
    /** Five */
    Five = "five",
    /** Six */
    Six = "six",
    /** Seven */
    Seven = "seven",
    /** Eight */
    Eight = "eight",
    /** Nine */
    Nine = "nine",
    /** A */
    A = "a",
    /** B */
    B = "b",
    /** C */
    C = "c",
    /** D */
    D = "d",
    /** Pound */
    Pound = "pound",
    /** Asterisk */
    Asterisk = "asterisk"
}

/** The FileSource model. */
export declare interface FileSource extends PlaySource {
    url: string;
    readonly kind: "fileSource";
}

/**
 * Options to get call connection properties.
 */
export declare type GetCallConnectionPropertiesOptions = OperationOptions;

/**
 * Options to get a participant.
 */
export declare type GetParticipantOptions = OperationOptions;

/**
 * Options to get recording properties.
 */
export declare type GetRecordingPropertiesOptions = OperationOptions;

/**
 * Options to hang up the call
 */
export declare type HangUpOptions = OperationOptions;

/** Known values of {@link CallRejectReason} that the service accepts. */
export declare enum KnownCallRejectReason {
    /** None */
    None = "none",
    /** Busy */
    Busy = "busy",
    /** Forbidden */
    Forbidden = "forbidden"
}

/** The response payload for getting participants of the call. */
export declare interface ListParticipantsResult {
    /** List of the current participants in the call. */
    values?: CallParticipant[];
    /** Continue of the list of participants */
    nextLink?: string;
}

/** A Microsoft Teams application. */
declare interface MicrosoftTeamsAppIdentifierModel {
    /** The Id of the Microsoft Teams application. */
    appId: string;
    /** The cloud that the Microsoft Teams application belongs to. By default 'public' if missing. */
    cloud?: CommunicationCloudEnvironmentModel;
}

/** A Microsoft Teams user. */
declare interface MicrosoftTeamsUserIdentifierModel {
    /** The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. */
    userId: string;
    /** True if the Microsoft Teams user is anonymous. By default false if missing. */
    isAnonymous?: boolean;
    /** The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. */
    cloud?: CommunicationCloudEnvironmentModel;
}

/**
 * Options to mute participant.
 */
export declare interface MuteParticipantOption extends OperationOptions {
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
}

/** The response payload for muting participant from the call. */
export declare interface MuteParticipantResult {
    /** The operation context provided by client. */
    operationContext?: string;
}

/**
 * Helper function for parsing Acs callback events.
 */
export declare function parseCallAutomationEvent(encodedEvents: string | Record<string, unknown>): CallAutomationEvent;

/** Event when there was an update to participant(s). */
export declare interface ParticipantsUpdated extends Omit<RestParticipantsUpdated, "callConnectionId" | "serverCallId" | "correlationId" | "participants"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** The list of participants in the call. */
    participants: CallParticipant[];
    /** kind of this event. */
    kind: "ParticipantsUpdated";
}

/**
 * Options to get a pause a recording.
 */
export declare type PauseRecordingOptions = OperationOptions;

/** A phone number. */
declare interface PhoneNumberIdentifierModel {
    /** The phone number in E.164 format. */
    value: string;
}

/** Event when Media play was canceled by Cancel operation. */
export declare interface PlayCanceled extends Omit<RestPlayCanceled, "callConnectionId" | "serverCallId" | "correlationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "PlayCanceled";
}

/** Event when Media play was successfully completed. */
export declare interface PlayCompleted extends Omit<RestPlayCompleted, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "PlayCompleted";
}

/** Event when Media play was failed. */
export declare interface PlayFailed extends Omit<RestPlayFailed, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "PlayFailed";
}

/**
 * Options to play audio.
 */
export declare interface PlayOptions extends OperationOptions {
    /** Determine if it is looping */
    loop?: boolean;
    /** The value to identify context of the operation. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The PlaySource model. */
export declare interface PlaySource {
    /** @deprecated Not in use, instead use playsourcecacheid for similar functionality*/
    playsourcacheid?: string;
}

/** A Recognition Choice */
export declare interface RecognitionChoice {
    /** Identifier for a given choice */
    label: string;
    /** List of phrases to recognize */
    phrases: string[];
    tone?: DtmfTone;
}

/**
 * Defines values for RecognitionType. \
 * {@link KnownRecognitionType} can be used interchangeably with RecognitionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **dtmf** \
 * **speech** \
 * **choices**
 */
export declare type RecognitionType = string;

/** Event when Media recognize was canceled by Cancel operation. */
export declare interface RecognizeCanceled extends Omit<RestRecognizeCanceled, "callConnectionId" | "serverCallId" | "correlationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "RecognizeCanceled";
}

/** Event when Media recognize was successfully completed. */
export declare interface RecognizeCompleted extends Omit<RestRecognizeCompleted, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "RecognizeCompleted";
}

/** Event when Media recognize was failed. */
export declare interface RecognizeFailed extends Omit<RestRecognizeFailed, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "RecognizeFailed";
}

/** The type of the recognition that the service accepts. */
export declare enum RecognizeInputType {
    /** Dtmf */
    Dtmf = "dtmf"
}

/** The channel type of a call recording. */
export declare type RecordingChannel = "mixed" | "unmixed";

/** The content type of a call recording. */
export declare type RecordingContent = "audio" | "audioVideo";

/** The format type of a call recording. */
export declare type RecordingFormat = "mp3" | "mp4" | "wav";

/** The format type of a call recording. */
export declare type RecordingKind = "azureCommunicationServices" | "teams" | "teamsCompliance";

/**
 * Defines values for RecordingKind. \
 * {@link KnownRecordingKind} can be used interchangeably with RecordingKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureCommunicationServices**: Recording initiated by Azure Communication Services \
 * **Teams**: Recording initiated by Teams user \
 * **TeamsCompliance**: Recording initiated by Teams compliance policy
 */
declare type RecordingKind_2 = string;

/**
 * Defines values for RecordingState. \
 * {@link KnownRecordingState} can be used interchangeably with RecordingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active** \
 * **inactive**
 */
export declare type RecordingState = string;

/** Event when Recording state has been changed. */
export declare interface RecordingStateChanged extends Omit<RestRecordingStateChanged, "callConnectionId" | "serverCallId" | "correlationId"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** kind of this event. */
    kind: "RecordingStateChanged";
}

/** The response payload for starting a call recording or getting call recording state. */
export declare interface RecordingStateResult {
    recordingId: string;
    recordingKind: RecordingKind_2;
    recordingState: RecordingState;
}

/** The recording storage */
export declare interface RecordingStorage {
    /** Defines the kind of recording storage */
    recordingStorageKind: RecordingStorageKind;
    /** Uri of a container or a location within a container */
    recordingDestinationContainerUrl?: string;
}

/** The storage type of a call recording. */
export declare type RecordingStorageKind = "azureCommunicationServices" | "azureBlobStorage";

/**
 * Options to redirect call.
 */
export declare type RedirectCallOptions = OperationOptions;

/**
 * Options to reject call.
 */
export declare interface RejectCallOptions extends OperationOptions {
    /** The rejection reason. */
    callRejectReason?: CallRejectReason;
}

/** The failed to remove participant event. */
export declare interface RemoveParticipantFailed extends Omit<RestRemoveParticipantFailed, "callConnectionId" | "serverCallId" | "correlationId" | "participant" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** The participant in the call. */
    participant?: CommunicationIdentifier;
    /** kind of this event. */
    kind: "RemoveParticipantFailed";
}

/** The response payload for removing participants from the call. */
export declare interface RemoveParticipantResult {
    /** The operation context provided by client. */
    operationContext?: string;
}

/**
 * Options to remove participants.
 */
export declare interface RemoveParticipantsOption extends OperationOptions {
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The participant successfully removed event. */
export declare interface RemoveParticipantSucceeded extends Omit<RestRemoveParticipantSucceeded, "callConnectionId" | "serverCallId" | "correlationId" | "participant" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** The participant in the call. */
    participant?: CommunicationIdentifier;
    /** kind of this event. */
    kind: "RemoveParticipantSucceeded";
}

/** The failed to add participants event. */
export declare interface RestAddParticipantFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Participant */
    participant?: CommunicationIdentifierModel;
}

/** The participants successfully added event. */
export declare interface RestAddParticipantSucceeded {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Participant */
    participant?: CommunicationIdentifierModel;
}

/** The call connected event. */
export declare interface RestCallConnected {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers to set the context for creating a new call. This property will be null for answering a call. */
    operationContext?: string;
}

/** The call disconnected event. */
export declare interface RestCallDisconnected {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers to set the context for creating a new call. This property will be null for answering a call. */
    operationContext?: string;
}

/** The call transfer accepted event. */
export declare interface RestCallTransferAccepted {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Target who the call is transferred to. */
    transferTarget?: CommunicationIdentifierModel;
    /** the participant who is being transferred away. */
    transferee?: CommunicationIdentifierModel;
}

/** The call transfer failed event. */
export declare interface RestCallTransferFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

/** Failed cancel add participant event. */
export declare interface RestCancelAddParticipantFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: RestResultInformation;
    /** Invitation ID used to cancel the request. */
    invitationId?: string;
}

/** Successful cancel add participant event. */
export declare interface RestCancelAddParticipantSucceeded {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Invitation ID used to cancel the request. */
    invitationId?: string;
}

export declare interface RestContinuousDtmfRecognitionStopped {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface RestContinuousDtmfRecognitionToneFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
}

export declare interface RestContinuousDtmfRecognitionToneReceived {
    /**
     * The sequence id which can be used to determine if the same tone was played multiple times or if any tones were missed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sequenceId?: number;
    tone?: Tone;
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId or skype chain ID. */
    correlationId?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
}

/** The participants updated in a call event. */
export declare interface RestParticipantsUpdated {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** The Sequence Number of the event */
    sequenceNumber?: number;
    /** The list of participants in the call. */
    participants?: CallParticipantInternal[];
}

export declare interface RestPlayCanceled {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
}

export declare interface RestPlayCompleted {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface RestPlayFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface RestRecognizeCanceled {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
}

export declare interface RestRecognizeCompleted {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /**
     * Determines the sub-type of the recognize operation.
     * In case of cancel operation the this field is not set and is returned empty
     */
    recognitionType?: RecognitionType;
    /** Defines the result for RecognitionType = Dtmf */
    dtmfResult?: DtmfResult;
    /** Defines the result for RecognitionType = Choices */
    choiceResult?: ChoiceResult;
    /**
     * Defines the result for RecognitionType = Speech and SpeechOrDtmf
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly speechResult?: SpeechResult;
}

export declare interface RestRecognizeFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface RestRecordingStateChanged {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /**
     * The call recording id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recordingId?: string;
    state?: RecordingState;
    /**
     * The time of the recording started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startDateTime?: Date;
    recordingKind?: RecordingKind_2;
}

/** The failed to remove participant event. */
export declare interface RestRemoveParticipantFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Participant */
    participant?: CommunicationIdentifierModel;
}

/** The participant removed event. */
export declare interface RestRemoveParticipantSucceeded {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
    /** Participant */
    participant?: CommunicationIdentifierModel;
}

export declare interface RestResultInformation {
    /** Code of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. */
    code?: number;
    /** Subcode of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. */
    subCode?: number;
    /** Detail message that describes the current result. */
    message?: string;
}

export declare interface RestSendDtmfTonesCompleted {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface RestSendDtmfTonesFailed {
    /** Call connection ID. */
    callConnectionId?: string;
    /** Server call ID. */
    serverCallId?: string;
    /** Correlation ID for event to call correlation. */
    correlationId?: string;
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /** Contains the resulting SIP code, sub-code and message. */
    resultInformation?: RestResultInformation;
}

export declare interface ResultInformation extends Omit<RestResultInformation, "code" | "subCode" | "message"> {
    /** The error code. */
    code: number;
    /** The sub code of error. */
    subCode: number;
    /** The detailed message of the error. */
    message: string;
}

/**
 * Options to resume recording.
 */
export declare type ResumeRecordingOptions = OperationOptions;

/** Event sent when Dtmf tones send successfully. */
export declare interface SendDtmfTonesCompleted extends Omit<RestSendDtmfTonesCompleted, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "SendDtmfTonesCompleted";
}

/** Event sent when Dtmf tones send failed. */
export declare interface SendDtmfTonesFailed extends Omit<RestSendDtmfTonesFailed, "callConnectionId" | "serverCallId" | "correlationId" | "resultInformation"> {
    /** Call connection ID. */
    callConnectionId: string;
    /** Server call ID. */
    serverCallId: string;
    /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */
    correlationId: string;
    /** Contains the resulting SIP code/sub-code and message from NGC services. */
    resultInformation?: ResultInformation;
    /** kind of this event. */
    kind: "SendDtmfTonesFailed";
}

/**
 * Options to send Dtmf tones.
 */
export declare interface SendDtmfTonesOptions extends OperationOptions {
    /** The value to identify context of the operation. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
}

/** The response payload for sending DTMF tones. */
export declare interface SendDtmfTonesResult {
    /** The operation context provided by client. */
    operationContext?: string;
}

/** SIP Custom header. */
export declare interface SipCustomHeader extends CustomCallingContextHeader {
    kind: "sipx";
}

/** SIP User To User header. */
export declare interface SipUserToUserHeader extends CustomCallingContextHeader {
    kind: "sipuui";
}

/** The speech status as a result. */
export declare interface SpeechResult {
    /** The recognized speech in string. */
    speech?: string;
}

/** The SsmlSource model. */
export declare interface SsmlSource extends PlaySource {
    ssmlText: string;
    customVoiceEndpointId?: string;
    readonly kind: "ssmlSource";
}

/**
 * Options to get a start a recording.
 */
export declare interface StartRecordingOptions extends OperationOptions {
    /** The call locator. */
    callLocator: CallLocator;
    /** The url to send notifications to. */
    recordingStateCallbackEndpointUrl?: string;
    /** The content type of call recording. */
    recordingContent?: RecordingContent;
    /** The channel type of call recording. */
    recordingChannel?: RecordingChannel;
    /** The format type of call recording. */
    recordingFormat?: RecordingFormat;
    /** Pause on start call recording option. */
    pauseOnStart?: boolean;
    /** Recording storage option. */
    recordingStorage?: RecordingStorage;
    /**
     * The sequential order in which audio channels are assigned to participants in the unmixed recording.
     * When 'recordingChannelType' is set to 'unmixed' and `audioChannelParticipantOrdering` is not specified,
     * the audio channel to participant mapping will be automatically assigned based on the order in which participant
     * first audio was detected.  Channel to participant mapping details can be found in the metadata of the recording.
     */
    audioChannelParticipantOrdering?: CommunicationIdentifier[];
    /**
     * The channel affinity of call recording
     * When 'recordingChannelType' is set to 'unmixed', if channelAffinity is not specified, 'channel' will be automatically assigned.
     * Channel-Participant mapping details can be found in the metadata of the recording.
     */
    channelAffinity?: ChannelAffinity[];
}

/**
 * Options to get a stop a recording.
 */
export declare type StopRecordingOptions = OperationOptions;

/** The TextSource model. */
export declare interface TextSource extends PlaySource {
    text: string;
    sourceLocale?: string;
    voiceKind?: VoiceKind;
    voiceName?: string;
    customVoiceEndpointId?: string;
    readonly kind: "textSource";
}

/**
 * Defines values for Tone. \
 * {@link KnownTone} can be used interchangeably with Tone,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **zero** \
 * **one** \
 * **two** \
 * **three** \
 * **four** \
 * **five** \
 * **six** \
 * **seven** \
 * **eight** \
 * **nine** \
 * **a** \
 * **b** \
 * **c** \
 * **d** \
 * **pound** \
 * **asterisk**
 */
export declare type Tone = string;

/** The response payload for transferring the call. */
export declare interface TransferCallResult {
    /** The operation context provided by client. */
    operationContext?: string;
}

/**
 * Options to transfer participants.
 */
export declare interface TransferCallToParticipantOptions extends OperationOptions {
    /** Used by customers when calling mid-call actions to correlate the request to the response event. */
    operationContext?: string;
    /**
     * Set a callback URL that overrides the default callback URL set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    operationCallbackUrl?: string;
    /** Transferee is the participant who is transferred away. */
    transferee?: CommunicationIdentifier;
    /** Used by customer to send custom context to targets. */
    customCallingContext?: CustomCallingContext;
}

/** Defines values for VoiceKind that the service accepts. */
export declare enum VoiceKind {
    /** Male */
    Male = "male",
    /** Female */
    Female = "female"
}

/** VOIP header. */
export declare interface VoipHeader extends CustomCallingContextHeader {
    kind: "voip";
}

export { }
